var _MichaelCombs28$elm_mdl$Material_Menu$toPx = function (_p0) {
	return A3(
		_elm_lang$core$Basics$flip,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		'px',
		_elm_lang$core$Basics$toString(_p0));
};
var _MichaelCombs28$elm_mdl$Material_Menu$rect = F4(
	function (x, y, w, h) {
		return function (coords) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'rect(',
				A2(_elm_lang$core$Basics_ops['++'], coords, ')'));
		}(
			A2(
				_elm_lang$core$String$join,
				' ',
				A2(
					_elm_lang$core$List$map,
					_MichaelCombs28$elm_mdl$Material_Menu$toPx,
					{
						ctor: '::',
						_0: x,
						_1: {
							ctor: '::',
							_0: y,
							_1: {
								ctor: '::',
								_0: w,
								_1: {
									ctor: '::',
									_0: h,
									_1: {ctor: '[]'}
								}
							}
						}
					})));
	});
var _MichaelCombs28$elm_mdl$Material_Menu$onKeyDown = function (action) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'keydown',
		{preventDefault: true, stopPropagation: false},
		A2(_elm_lang$core$Json_Decode$map, action, _elm_lang$html$Html_Events$keyCode));
};
var _MichaelCombs28$elm_mdl$Material_Menu$onClick = F2(
	function (decoder, action) {
		return A2(
			_elm_lang$html$Html_Events$on,
			'click',
			A2(_elm_lang$core$Json_Decode$map, action, decoder));
	});
var _MichaelCombs28$elm_mdl$Material_Menu$withGeometry = F2(
	function (model, f) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_MichaelCombs28$elm_mdl$Material_Options$nop,
			A2(_elm_lang$core$Maybe$map, f, model.geometry));
	});
var _MichaelCombs28$elm_mdl$Material_Menu$icon = function (name) {
	return _MichaelCombs28$elm_mdl$Material_Options$set(
		function (config) {
			return _elm_lang$core$Native_Utils.update(
				config,
				{icon: name});
		});
};
var _MichaelCombs28$elm_mdl$Material_Menu$ripple = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{ripple: true});
	});
var _MichaelCombs28$elm_mdl$Material_Menu$onSelect = function (msg) {
	return _MichaelCombs28$elm_mdl$Material_Options$set(
		function (config) {
			return _elm_lang$core$Native_Utils.update(
				config,
				{
					onSelect: _elm_lang$core$Maybe$Just(msg)
				});
		});
};
var _MichaelCombs28$elm_mdl$Material_Menu$disabled = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{enabled: false});
	});
var _MichaelCombs28$elm_mdl$Material_Menu$divider = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{divider: true});
	});
var _MichaelCombs28$elm_mdl$Material_Menu$defaultItemConfig = {enabled: true, divider: false, onSelect: _elm_lang$core$Maybe$Nothing};
var _MichaelCombs28$elm_mdl$Material_Menu$constant = {transitionDurationSeconds: 0.3, transitionDurationFraction: 0.8, closeTimeout: 150};
var _MichaelCombs28$elm_mdl$Material_Menu$transitionDuration = _MichaelCombs28$elm_mdl$Material_Menu$constant.transitionDurationSeconds * _MichaelCombs28$elm_mdl$Material_Menu$constant.transitionDurationFraction;
var _MichaelCombs28$elm_mdl$Material_Menu$Model = F4(
	function (a, b, c, d) {
		return {ripples: a, animationState: b, geometry: c, index: d};
	});
var _MichaelCombs28$elm_mdl$Material_Menu$Item = F2(
	function (a, b) {
		return {options: a, html: b};
	});
var _MichaelCombs28$elm_mdl$Material_Menu$item = _MichaelCombs28$elm_mdl$Material_Menu$Item;
var _MichaelCombs28$elm_mdl$Material_Menu$ItemConfig = F3(
	function (a, b, c) {
		return {enabled: a, divider: b, onSelect: c};
	});
var _MichaelCombs28$elm_mdl$Material_Menu$Config = F3(
	function (a, b, c) {
		return {alignment: a, ripple: b, icon: c};
	});
var _MichaelCombs28$elm_mdl$Material_Menu$Closing = {ctor: 'Closing'};
var _MichaelCombs28$elm_mdl$Material_Menu$Opened = {ctor: 'Opened'};
var _MichaelCombs28$elm_mdl$Material_Menu$clip = F3(
	function (model, config, geometry) {
		var height = geometry.menu.bounds.height;
		var width = geometry.menu.bounds.width;
		return A2(
			_MichaelCombs28$elm_mdl$Material_Options$css,
			'clip',
			function () {
				if (_elm_lang$core$Native_Utils.eq(model.animationState, _MichaelCombs28$elm_mdl$Material_Menu$Opened) || _elm_lang$core$Native_Utils.eq(model.animationState, _MichaelCombs28$elm_mdl$Material_Menu$Closing)) {
					return A4(_MichaelCombs28$elm_mdl$Material_Menu$rect, 0, width, height, 0);
				} else {
					var _p1 = config.alignment;
					switch (_p1.ctor) {
						case 'BottomRight':
							return A4(_MichaelCombs28$elm_mdl$Material_Menu$rect, 0, width, 0, width);
						case 'TopLeft':
							return A4(_MichaelCombs28$elm_mdl$Material_Menu$rect, height, 0, height, 0);
						case 'TopRight':
							return A4(_MichaelCombs28$elm_mdl$Material_Menu$rect, height, width, height, width);
						default:
							return '';
					}
				}
			}());
	});
var _MichaelCombs28$elm_mdl$Material_Menu$Opening = {ctor: 'Opening'};
var _MichaelCombs28$elm_mdl$Material_Menu$isActive = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.animationState, _MichaelCombs28$elm_mdl$Material_Menu$Opened) || _elm_lang$core$Native_Utils.eq(model.animationState, _MichaelCombs28$elm_mdl$Material_Menu$Opening);
};
var _MichaelCombs28$elm_mdl$Material_Menu$Idle = {ctor: 'Idle'};
var _MichaelCombs28$elm_mdl$Material_Menu$defaultModel = {ripples: _elm_lang$core$Dict$empty, animationState: _MichaelCombs28$elm_mdl$Material_Menu$Idle, geometry: _elm_lang$core$Maybe$Nothing, index: _elm_lang$core$Maybe$Nothing};
var _MichaelCombs28$elm_mdl$Material_Menu$Key = F2(
	function (a, b) {
		return {ctor: 'Key', _0: a, _1: b};
	});
var _MichaelCombs28$elm_mdl$Material_Menu$Click = function (a) {
	return {ctor: 'Click', _0: a};
};
var _MichaelCombs28$elm_mdl$Material_Menu$subscriptions = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.animationState, _MichaelCombs28$elm_mdl$Material_Menu$Opened) ? _elm_lang$mouse$Mouse$clicks(_MichaelCombs28$elm_mdl$Material_Menu$Click) : _elm_lang$core$Platform_Sub$none;
};
var _MichaelCombs28$elm_mdl$Material_Menu$Ripple = F2(
	function (a, b) {
		return {ctor: 'Ripple', _0: a, _1: b};
	});
var _MichaelCombs28$elm_mdl$Material_Menu$Tick = {ctor: 'Tick'};
var _MichaelCombs28$elm_mdl$Material_Menu$Close = {ctor: 'Close'};
var _MichaelCombs28$elm_mdl$Material_Menu$Select = F2(
	function (a, b) {
		return {ctor: 'Select', _0: a, _1: b};
	});
var _MichaelCombs28$elm_mdl$Material_Menu$update = F3(
	function (fwd, msg, model) {
		update:
		while (true) {
			var _p2 = msg;
			switch (_p2.ctor) {
				case 'Open':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								animationState: function () {
									var _p3 = model.animationState;
									if (_p3.ctor === 'Opened') {
										return _MichaelCombs28$elm_mdl$Material_Menu$Opened;
									} else {
										return _MichaelCombs28$elm_mdl$Material_Menu$Opening;
									}
								}(),
								geometry: _elm_lang$core$Maybe$Just(_p2._0)
							}),
						_1: _MichaelCombs28$elm_mdl$Material_Helpers$cmd(
							fwd(_MichaelCombs28$elm_mdl$Material_Menu$Tick))
					};
				case 'Tick':
					return _MichaelCombs28$elm_mdl$Material_Helpers$pure(
						_elm_lang$core$Native_Utils.update(
							model,
							{animationState: _MichaelCombs28$elm_mdl$Material_Menu$Opened}));
				case 'Close':
					return _MichaelCombs28$elm_mdl$Material_Helpers$pure(
						_elm_lang$core$Native_Utils.update(
							model,
							{animationState: _MichaelCombs28$elm_mdl$Material_Menu$Idle, geometry: _elm_lang$core$Maybe$Nothing, index: _elm_lang$core$Maybe$Nothing}));
				case 'Select':
					var cmds = A2(
						_elm_lang$core$List$filterMap,
						_elm_lang$core$Basics$identity,
						{
							ctor: '::',
							_0: _elm_lang$core$Maybe$Just(
								A2(
									_MichaelCombs28$elm_mdl$Material_Helpers$delay,
									_MichaelCombs28$elm_mdl$Material_Menu$constant.closeTimeout,
									fwd(_MichaelCombs28$elm_mdl$Material_Menu$Close))),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$core$Maybe$map, _MichaelCombs28$elm_mdl$Material_Helpers$cmd, _p2._1),
								_1: {ctor: '[]'}
							}
						});
					var model_ = _elm_lang$core$Native_Utils.update(
						model,
						{animationState: _MichaelCombs28$elm_mdl$Material_Menu$Closing});
					return {
						ctor: '_Tuple2',
						_0: model_,
						_1: _elm_lang$core$Platform_Cmd$batch(cmds)
					};
				case 'Ripple':
					var _p6 = _p2._0;
					var _p4 = A2(
						_MichaelCombs28$elm_mdl$Material_Ripple$update,
						_p2._1,
						A2(
							_elm_lang$core$Maybe$withDefault,
							_MichaelCombs28$elm_mdl$Material_Ripple$model,
							A2(_elm_lang$core$Dict$get, _p6, model.ripples)));
					var model_ = _p4._0;
					var effects = _p4._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								ripples: A3(_elm_lang$core$Dict$insert, _p6, model_, model.ripples)
							}),
						_1: A2(
							_elm_lang$core$Platform_Cmd$map,
							function (_p5) {
								return fwd(
									A2(_MichaelCombs28$elm_mdl$Material_Menu$Ripple, _p6, _p5));
							},
							effects)
					};
				case 'Click':
					if (_MichaelCombs28$elm_mdl$Material_Menu$isActive(model)) {
						var _p7 = model.geometry;
						if (_p7.ctor === 'Just') {
							var inside = F2(
								function (_p9, _p8) {
									var _p10 = _p9;
									var _p15 = _p10.y;
									var _p14 = _p10.x;
									var _p11 = _p8;
									var _p13 = _p11.top;
									var _p12 = _p11.left;
									return (_elm_lang$core$Native_Utils.cmp(
										_p12,
										_elm_lang$core$Basics$toFloat(_p14)) < 1) && ((_elm_lang$core$Native_Utils.cmp(
										_elm_lang$core$Basics$toFloat(_p14),
										_p12 + _p11.width) < 1) && ((_elm_lang$core$Native_Utils.cmp(
										_p13,
										_elm_lang$core$Basics$toFloat(_p15)) < 1) && (_elm_lang$core$Native_Utils.cmp(
										_elm_lang$core$Basics$toFloat(_p15),
										_p13 + _p11.height) < 1)));
								});
							if (A2(inside, _p2._0, _p7._0.menu.bounds)) {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							} else {
								var _v6 = fwd,
									_v7 = _MichaelCombs28$elm_mdl$Material_Menu$Close,
									_v8 = model;
								fwd = _v6;
								msg = _v7;
								model = _v8;
								continue update;
							}
						} else {
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						}
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					}
				default:
					var _p24 = _p2._0;
					var _p16 = _p2._1;
					switch (_p16) {
						case 13:
							if (_MichaelCombs28$elm_mdl$Material_Menu$isActive(model)) {
								var _p17 = model.index;
								if (_p17.ctor === 'Just') {
									var _p19 = _p17._0;
									var cmd = A2(
										_elm_lang$core$Maybe$andThen,
										function (_p18) {
											return function (_) {
												return _.onSelect;
											}(
												function (_) {
													return _.config;
												}(_p18));
										},
										_elm_lang$core$List$head(
											A2(_elm_lang$core$List$drop, _p19, _p24)));
									var _v11 = fwd,
										_v12 = A2(_MichaelCombs28$elm_mdl$Material_Menu$Select, _p19 + 1, cmd),
										_v13 = model;
									fwd = _v11;
									msg = _v12;
									model = _v13;
									continue update;
								} else {
									var _v14 = fwd,
										_v15 = _MichaelCombs28$elm_mdl$Material_Menu$Close,
										_v16 = model;
									fwd = _v14;
									msg = _v15;
									model = _v16;
									continue update;
								}
							} else {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							}
						case 27:
							var _v17 = fwd,
								_v18 = _MichaelCombs28$elm_mdl$Material_Menu$Close,
								_v19 = model;
							fwd = _v17;
							msg = _v18;
							model = _v19;
							continue update;
						case 32:
							if (_MichaelCombs28$elm_mdl$Material_Menu$isActive(model)) {
								var _v20 = fwd,
									_v21 = A2(_MichaelCombs28$elm_mdl$Material_Menu$Key, _p24, 13),
									_v22 = model;
								fwd = _v20;
								msg = _v21;
								model = _v22;
								continue update;
							} else {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							}
						case 40:
							if (_MichaelCombs28$elm_mdl$Material_Menu$isActive(model)) {
								var items = A2(
									_elm_lang$core$List$indexedMap,
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										}),
									_p24);
								return A3(
									_elm_lang$core$Basics$flip,
									F2(
										function (x, y) {
											return A2(_elm_lang$core$Platform_Cmd_ops['!'], x, y);
										}),
									{ctor: '[]'},
									A2(
										_elm_lang$core$Maybe$withDefault,
										model,
										A2(
											_elm_lang$core$Maybe$map,
											function (_p20) {
												return function (index_) {
													return _elm_lang$core$Native_Utils.update(
														model,
														{
															index: _elm_lang$core$Maybe$Just(index_)
														});
												}(
													_elm_lang$core$Tuple$first(_p20));
											},
											_elm_lang$core$List$head(
												A2(
													_elm_lang$core$List$filter,
													function (_p21) {
														return function (_) {
															return _.enabled;
														}(
															function (_) {
																return _.config;
															}(
																_elm_lang$core$Tuple$second(_p21)));
													},
													A2(
														_elm_lang$core$List$drop,
														1 + A2(_elm_lang$core$Maybe$withDefault, -1, model.index),
														A2(_elm_lang$core$Basics_ops['++'], items, items)))))));
							} else {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							}
						case 38:
							if (_MichaelCombs28$elm_mdl$Material_Menu$isActive(model)) {
								var items = A2(
									_elm_lang$core$List$indexedMap,
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										}),
									_p24);
								return _MichaelCombs28$elm_mdl$Material_Helpers$pure(
									A2(
										_elm_lang$core$Maybe$withDefault,
										model,
										A2(
											_elm_lang$core$Maybe$map,
											function (_p22) {
												return function (index_) {
													return _elm_lang$core$Native_Utils.update(
														model,
														{
															index: _elm_lang$core$Maybe$Just(index_)
														});
												}(
													_elm_lang$core$Tuple$first(_p22));
											},
											_elm_lang$core$List$head(
												A2(
													_elm_lang$core$List$filter,
													function (_p23) {
														return function (_) {
															return _.enabled;
														}(
															function (_) {
																return _.config;
															}(
																_elm_lang$core$Tuple$second(_p23)));
													},
													A2(
														_elm_lang$core$List$drop,
														_elm_lang$core$List$length(_p24) - A2(_elm_lang$core$Maybe$withDefault, 0, model.index),
														_elm_lang$core$List$reverse(
															A2(_elm_lang$core$Basics_ops['++'], items, items))))))));
							} else {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							}
						default:
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
					}
			}
		}
	});
var _MichaelCombs28$elm_mdl$Material_Menu$update_ = F3(
	function (fwd, msg, model) {
		return _MichaelCombs28$elm_mdl$Material_Helpers$partsUpdatePort(
			_elm_lang$core$Maybe$Just(
				A3(_MichaelCombs28$elm_mdl$Material_Menu$update, fwd, msg, model)));
	});
var _MichaelCombs28$elm_mdl$Material_Menu$pack = A4(
	_MichaelCombs28$elm_parts$Parts$pack,
	_MichaelCombs28$elm_mdl$Material_Menu$update_,
	function (_) {
		return _.menu;
	},
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.update(
				y,
				{menu: x});
		}),
	_MichaelCombs28$elm_mdl$Material_Menu$defaultModel);
var _MichaelCombs28$elm_mdl$Material_Menu$subs = function (lift) {
	return function (_p25) {
		return _elm_lang$core$Platform_Sub$batch(
			A3(
				_elm_lang$core$Dict$foldl,
				F3(
					function (idx, model, ss) {
						return {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Platform_Sub$map,
								A2(_MichaelCombs28$elm_mdl$Material_Menu$pack, lift, idx),
								_MichaelCombs28$elm_mdl$Material_Menu$subscriptions(model)),
							_1: ss
						};
					}),
				{ctor: '[]'},
				function (_) {
					return _.menu;
				}(_p25)));
	};
};
var _MichaelCombs28$elm_mdl$Material_Menu$Open = function (a) {
	return {ctor: 'Open', _0: a};
};
var _MichaelCombs28$elm_mdl$Material_Menu$TopRight = {ctor: 'TopRight'};
var _MichaelCombs28$elm_mdl$Material_Menu$topRight = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{alignment: _MichaelCombs28$elm_mdl$Material_Menu$TopRight});
	});
var _MichaelCombs28$elm_mdl$Material_Menu$TopLeft = {ctor: 'TopLeft'};
var _MichaelCombs28$elm_mdl$Material_Menu$topLeft = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{alignment: _MichaelCombs28$elm_mdl$Material_Menu$TopLeft});
	});
var _MichaelCombs28$elm_mdl$Material_Menu$delay = F4(
	function (alignment, height, offsetTop, offsetHeight) {
		var t = (_elm_lang$core$Native_Utils.eq(alignment, _MichaelCombs28$elm_mdl$Material_Menu$TopLeft) || _elm_lang$core$Native_Utils.eq(alignment, _MichaelCombs28$elm_mdl$Material_Menu$TopRight)) ? ((((height - offsetTop) - offsetHeight) / height) * _MichaelCombs28$elm_mdl$Material_Menu$transitionDuration) : ((offsetTop / height) * _MichaelCombs28$elm_mdl$Material_Menu$transitionDuration);
		return A2(
			_MichaelCombs28$elm_mdl$Material_Options$css,
			'transition-delay',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(t),
				's'));
	});
var _MichaelCombs28$elm_mdl$Material_Menu$view1 = F8(
	function (lift, config, model, offsetTop, offsetHeight, index, summary, item) {
		var canSelect = summary.config.enabled && (!_elm_lang$core$Native_Utils.eq(summary.config.onSelect, _elm_lang$core$Maybe$Nothing));
		var hasRipple = config.ripple && canSelect;
		var ripple = function (_p26) {
			return lift(
				A2(_MichaelCombs28$elm_mdl$Material_Menu$Ripple, index, _p26));
		};
		return A5(
			_MichaelCombs28$elm_mdl$Material_Options$apply,
			summary,
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-menu__item'),
				_1: {
					ctor: '::',
					_0: A2(
						_MichaelCombs28$elm_mdl$Material_Options$when,
						_MichaelCombs28$elm_mdl$Material_Options$cs('mdl-js-ripple-effect'),
						config.ripple),
					_1: {
						ctor: '::',
						_0: A2(
							_MichaelCombs28$elm_mdl$Material_Options$when,
							_MichaelCombs28$elm_mdl$Material_Options$cs('mdl-menu__item--full-bleed-divider'),
							summary.config.divider),
						_1: {
							ctor: '::',
							_0: A2(
								_MichaelCombs28$elm_mdl$Material_Options$when,
								A2(_MichaelCombs28$elm_mdl$Material_Options$css, 'background-color', 'rgb(238,238,238)'),
								_elm_lang$core$Native_Utils.eq(
									model.index,
									_elm_lang$core$Maybe$Just(index))),
							_1: {
								ctor: '::',
								_0: function () {
									var _p27 = {
										ctor: '_Tuple2',
										_0: model.geometry,
										_1: _MichaelCombs28$elm_mdl$Material_Menu$isActive(model)
									};
									if (((_p27.ctor === '_Tuple2') && (_p27._0.ctor === 'Just')) && (_p27._1 === true)) {
										return A4(_MichaelCombs28$elm_mdl$Material_Menu$delay, config.alignment, _p27._0._0.menu.bounds.height, offsetTop, offsetHeight);
									} else {
										return _MichaelCombs28$elm_mdl$Material_Options$nop;
									}
								}(),
								_1: {
									ctor: '::',
									_0: A2(_MichaelCombs28$elm_mdl$Material_Options$css, 'display', 'flex'),
									_1: {
										ctor: '::',
										_0: A2(_MichaelCombs28$elm_mdl$Material_Options$css, 'align-items', 'center'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$List$filterMap,
					_elm_lang$core$Basics$identity,
					{
						ctor: '::',
						_0: canSelect ? _elm_lang$core$Maybe$Just(
							_elm_lang$html$Html_Events$onClick(
								lift(
									A2(_MichaelCombs28$elm_mdl$Material_Menu$Select, index, summary.config.onSelect)))) : _elm_lang$core$Maybe$Nothing,
						_1: {
							ctor: '::',
							_0: (!summary.config.enabled) ? _elm_lang$core$Maybe$Just(
								A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', 'disabled')) : _elm_lang$core$Maybe$Nothing,
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Maybe$Just(
									A2(
										_elm_lang$html$Html_Attributes$property,
										'tabindex',
										_elm_lang$core$Json_Encode$string('-1'))),
								_1: {ctor: '[]'}
							}
						}
					}),
				hasRipple ? {
					ctor: '::',
					_0: A2(_MichaelCombs28$elm_mdl$Material_Ripple$downOn_, ripple, 'mousedown'),
					_1: {
						ctor: '::',
						_0: A2(_MichaelCombs28$elm_mdl$Material_Ripple$downOn_, ripple, 'touchstart'),
						_1: {
							ctor: '::',
							_0: A2(_MichaelCombs28$elm_mdl$Material_Ripple$upOn_, ripple, 'mouseup'),
							_1: {
								ctor: '::',
								_0: A2(_MichaelCombs28$elm_mdl$Material_Ripple$upOn_, ripple, 'mouseleave'),
								_1: {
									ctor: '::',
									_0: A2(_MichaelCombs28$elm_mdl$Material_Ripple$upOn_, ripple, 'touchend'),
									_1: {
										ctor: '::',
										_0: A2(_MichaelCombs28$elm_mdl$Material_Ripple$upOn_, ripple, 'blur'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				} : {ctor: '[]'}),
			hasRipple ? A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				item.html,
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$map,
						ripple,
						A2(
							_MichaelCombs28$elm_mdl$Material_Ripple$view_,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('mdl-menu__item-ripple-container'),
								_1: {ctor: '[]'}
							},
							A2(
								_elm_lang$core$Maybe$withDefault,
								_MichaelCombs28$elm_mdl$Material_Ripple$model,
								A2(_elm_lang$core$Dict$get, index, model.ripples)))),
					_1: {ctor: '[]'}
				}) : item.html);
	});
var _MichaelCombs28$elm_mdl$Material_Menu$BottomRight = {ctor: 'BottomRight'};
var _MichaelCombs28$elm_mdl$Material_Menu$bottomRight = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{alignment: _MichaelCombs28$elm_mdl$Material_Menu$BottomRight});
	});
var _MichaelCombs28$elm_mdl$Material_Menu$BottomLeft = {ctor: 'BottomLeft'};
var _MichaelCombs28$elm_mdl$Material_Menu$defaultConfig = {alignment: _MichaelCombs28$elm_mdl$Material_Menu$BottomLeft, ripple: false, icon: 'more_vert'};
var _MichaelCombs28$elm_mdl$Material_Menu$bottomLeft = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{alignment: _MichaelCombs28$elm_mdl$Material_Menu$BottomLeft});
	});
var _MichaelCombs28$elm_mdl$Material_Menu$containerGeometry = F2(
	function (alignment, geometry) {
		return _MichaelCombs28$elm_mdl$Material_Options$many(
			{
				ctor: '::',
				_0: A2(
					_MichaelCombs28$elm_mdl$Material_Options$css,
					'width',
					_MichaelCombs28$elm_mdl$Material_Menu$toPx(geometry.menu.bounds.width)),
				_1: {
					ctor: '::',
					_0: A2(
						_MichaelCombs28$elm_mdl$Material_Options$css,
						'height',
						_MichaelCombs28$elm_mdl$Material_Menu$toPx(geometry.menu.bounds.height)),
					_1: {
						ctor: '::',
						_0: (_elm_lang$core$Native_Utils.eq(alignment, _MichaelCombs28$elm_mdl$Material_Menu$BottomRight) || _elm_lang$core$Native_Utils.eq(alignment, _MichaelCombs28$elm_mdl$Material_Menu$BottomLeft)) ? A2(
							_MichaelCombs28$elm_mdl$Material_Options$css,
							'top',
							_MichaelCombs28$elm_mdl$Material_Menu$toPx(geometry.button.offsetTop + geometry.button.offsetHeight)) : _MichaelCombs28$elm_mdl$Material_Options$nop,
						_1: {
							ctor: '::',
							_0: function () {
								if (_elm_lang$core$Native_Utils.eq(alignment, _MichaelCombs28$elm_mdl$Material_Menu$BottomRight) || _elm_lang$core$Native_Utils.eq(alignment, _MichaelCombs28$elm_mdl$Material_Menu$TopRight)) {
									var right = function (e) {
										return e.bounds.left + e.bounds.width;
									};
									return A2(
										_MichaelCombs28$elm_mdl$Material_Options$css,
										'right',
										_MichaelCombs28$elm_mdl$Material_Menu$toPx(
											right(geometry.container) - right(geometry.menu)));
								} else {
									return _MichaelCombs28$elm_mdl$Material_Options$nop;
								}
							}(),
							_1: {
								ctor: '::',
								_0: function () {
									if (_elm_lang$core$Native_Utils.eq(alignment, _MichaelCombs28$elm_mdl$Material_Menu$TopLeft) || _elm_lang$core$Native_Utils.eq(alignment, _MichaelCombs28$elm_mdl$Material_Menu$TopRight)) {
										var bottom = geometry.container.bounds.top + geometry.container.bounds.height;
										return A2(
											_MichaelCombs28$elm_mdl$Material_Options$css,
											'bottom',
											_MichaelCombs28$elm_mdl$Material_Menu$toPx(bottom - geometry.button.bounds.top));
									} else {
										return _MichaelCombs28$elm_mdl$Material_Options$nop;
									}
								}(),
								_1: {
									ctor: '::',
									_0: (_elm_lang$core$Native_Utils.eq(alignment, _MichaelCombs28$elm_mdl$Material_Menu$TopLeft) || _elm_lang$core$Native_Utils.eq(alignment, _MichaelCombs28$elm_mdl$Material_Menu$BottomLeft)) ? A2(
										_MichaelCombs28$elm_mdl$Material_Options$css,
										'left',
										_MichaelCombs28$elm_mdl$Material_Menu$toPx(geometry.menu.offsetLeft)) : _MichaelCombs28$elm_mdl$Material_Options$nop,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
	});
var _MichaelCombs28$elm_mdl$Material_Menu$view = F4(
	function (lift, model, properties, items) {
		var itemSummaries = A2(
			_elm_lang$core$List$map,
			function (_p28) {
				return A2(
					_MichaelCombs28$elm_mdl$Material_Options$collect,
					_MichaelCombs28$elm_mdl$Material_Menu$defaultItemConfig,
					function (_) {
						return _.options;
					}(_p28));
			},
			items);
		var numItems = _elm_lang$core$List$length(items);
		var summary = A2(_MichaelCombs28$elm_mdl$Material_Options$collect, _MichaelCombs28$elm_mdl$Material_Menu$defaultConfig, properties);
		var config = summary.config;
		var alignment = function () {
			var _p29 = config.alignment;
			switch (_p29.ctor) {
				case 'BottomLeft':
					return _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-menu--bottom-left');
				case 'BottomRight':
					return _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-menu--bottom-right');
				case 'TopLeft':
					return _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-menu--top-left');
				default:
					return _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-menu--top-right');
			}
		}();
		return A5(
			_MichaelCombs28$elm_mdl$Material_Options$apply,
			summary,
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: A2(_MichaelCombs28$elm_mdl$Material_Options$css, 'position', 'relative'),
				_1: properties
			},
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$map,
					lift,
					A3(
						_MichaelCombs28$elm_mdl$Material_Options$styled,
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-button'),
							_1: {
								ctor: '::',
								_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-js-button'),
								_1: {
									ctor: '::',
									_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-button--icon'),
									_1: {
										ctor: '::',
										_0: A2(
											_MichaelCombs28$elm_mdl$Material_Options$when,
											_MichaelCombs28$elm_mdl$Material_Options_Internal$attribute(
												_MichaelCombs28$elm_mdl$Material_Menu$onKeyDown(
													_MichaelCombs28$elm_mdl$Material_Menu$Key(itemSummaries))),
											_MichaelCombs28$elm_mdl$Material_Menu$isActive(model)),
										_1: {
											ctor: '::',
											_0: A2(
												_MichaelCombs28$elm_mdl$Material_Options$when,
												_MichaelCombs28$elm_mdl$Material_Options_Internal$attribute(
													A2(_MichaelCombs28$elm_mdl$Material_Menu$onClick, _MichaelCombs28$elm_mdl$Material_Menu_Geometry$decode, _MichaelCombs28$elm_mdl$Material_Menu$Open)),
												!_elm_lang$core$Native_Utils.eq(model.animationState, _MichaelCombs28$elm_mdl$Material_Menu$Opened)),
											_1: {
												ctor: '::',
												_0: A2(
													_MichaelCombs28$elm_mdl$Material_Options$when,
													_MichaelCombs28$elm_mdl$Material_Options_Internal$attribute(
														_elm_lang$html$Html_Events$onClick(_MichaelCombs28$elm_mdl$Material_Menu$Close)),
													_MichaelCombs28$elm_mdl$Material_Menu$isActive(model)),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_MichaelCombs28$elm_mdl$Material_Icon$view,
								config.icon,
								{
									ctor: '::',
									_0: _MichaelCombs28$elm_mdl$Material_Options$cs('material-icons'),
									_1: {
										ctor: '::',
										_0: A2(_MichaelCombs28$elm_mdl$Material_Options$css, 'pointer-events', 'none'),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						})),
				_1: {
					ctor: '::',
					_0: A3(
						_MichaelCombs28$elm_mdl$Material_Options$styled,
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-menu__container'),
							_1: {
								ctor: '::',
								_0: _MichaelCombs28$elm_mdl$Material_Options$cs('is-upgraded'),
								_1: {
									ctor: '::',
									_0: A2(
										_MichaelCombs28$elm_mdl$Material_Options$when,
										_MichaelCombs28$elm_mdl$Material_Options$cs('is-visible'),
										_elm_lang$core$Native_Utils.eq(model.animationState, _MichaelCombs28$elm_mdl$Material_Menu$Opened) || _elm_lang$core$Native_Utils.eq(model.animationState, _MichaelCombs28$elm_mdl$Material_Menu$Closing)),
									_1: {
										ctor: '::',
										_0: A2(
											_MichaelCombs28$elm_mdl$Material_Menu$withGeometry,
											model,
											_MichaelCombs28$elm_mdl$Material_Menu$containerGeometry(config.alignment)),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: A3(
								_MichaelCombs28$elm_mdl$Material_Options$styled,
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-menu__outline'),
									_1: {
										ctor: '::',
										_0: alignment,
										_1: {
											ctor: '::',
											_0: A2(
												_MichaelCombs28$elm_mdl$Material_Menu$withGeometry,
												model,
												function (geometry) {
													return _MichaelCombs28$elm_mdl$Material_Options$many(
														{
															ctor: '::',
															_0: A2(
																_MichaelCombs28$elm_mdl$Material_Options$css,
																'width',
																_MichaelCombs28$elm_mdl$Material_Menu$toPx(geometry.menu.bounds.width)),
															_1: {
																ctor: '::',
																_0: A2(
																	_MichaelCombs28$elm_mdl$Material_Options$css,
																	'height',
																	_MichaelCombs28$elm_mdl$Material_Menu$toPx(geometry.menu.bounds.height)),
																_1: {ctor: '[]'}
															}
														});
												}),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A3(
									_MichaelCombs28$elm_mdl$Material_Options$styled,
									_elm_lang$html$Html$ul,
									{
										ctor: '::',
										_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-menu'),
										_1: {
											ctor: '::',
											_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-js-menu'),
											_1: {
												ctor: '::',
												_0: A2(
													_MichaelCombs28$elm_mdl$Material_Options$when,
													_MichaelCombs28$elm_mdl$Material_Options$cs('is-animating'),
													_elm_lang$core$Native_Utils.eq(model.animationState, _MichaelCombs28$elm_mdl$Material_Menu$Opening) || _elm_lang$core$Native_Utils.eq(model.animationState, _MichaelCombs28$elm_mdl$Material_Menu$Closing)),
												_1: {
													ctor: '::',
													_0: A2(
														_MichaelCombs28$elm_mdl$Material_Menu$withGeometry,
														model,
														A2(_MichaelCombs28$elm_mdl$Material_Menu$clip, model, config)),
													_1: {
														ctor: '::',
														_0: alignment,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									function () {
										var _p30 = model.geometry;
										if (_p30.ctor === 'Just') {
											var _p31 = _p30._0;
											return A6(
												_elm_lang$core$List$map5,
												A3(_MichaelCombs28$elm_mdl$Material_Menu$view1, lift, config, model),
												_p31.offsetTops,
												_p31.offsetHeights,
												A2(_elm_lang$core$List$range, 0, numItems - 1),
												itemSummaries,
												items);
										} else {
											return A4(
												_elm_lang$core$List$map3,
												A5(_MichaelCombs28$elm_mdl$Material_Menu$view1, lift, config, model, 0, 0),
												A2(_elm_lang$core$List$range, 0, numItems - 1),
												itemSummaries,
												items);
										}
									}()),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _MichaelCombs28$elm_mdl$Material_Menu$render = A5(
	_MichaelCombs28$elm_parts$Parts$create,
	_MichaelCombs28$elm_mdl$Material_Menu$view,
	_MichaelCombs28$elm_mdl$Material_Menu$update_,
	function (_) {
		return _.menu;
	},
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.update(
				y,
				{menu: x});
		}),
	_MichaelCombs28$elm_mdl$Material_Menu$defaultModel);
