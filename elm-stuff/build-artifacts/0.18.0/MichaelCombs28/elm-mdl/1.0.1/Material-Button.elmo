var _MichaelCombs28$elm_mdl$Material_Button$icon = _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-button--icon');
var _MichaelCombs28$elm_mdl$Material_Button$minifab = _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-button--mini-fab');
var _MichaelCombs28$elm_mdl$Material_Button$fab = _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-button--fab');
var _MichaelCombs28$elm_mdl$Material_Button$raised = _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-button--raised');
var _MichaelCombs28$elm_mdl$Material_Button$flat = _MichaelCombs28$elm_mdl$Material_Options$nop;
var _MichaelCombs28$elm_mdl$Material_Button$blurAndForward = function (event) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		A2(_elm_lang$core$Basics_ops['++'], 'on', event),
		'this.blur(); (function(self) { var e = document.createEvent(\'Event\'); e.initEvent(\'touchcancel\', true, true); self.lastChild.dispatchEvent(e); }(this));');
};
var _MichaelCombs28$elm_mdl$Material_Button$type_ = function (tp) {
	return _MichaelCombs28$elm_mdl$Material_Options$set(
		function (options) {
			return _elm_lang$core$Native_Utils.update(
				options,
				{
					type_: _elm_lang$core$Maybe$Just(tp)
				});
		});
};
var _MichaelCombs28$elm_mdl$Material_Button$accent = _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-button--accent');
var _MichaelCombs28$elm_mdl$Material_Button$primary = _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-button--primary');
var _MichaelCombs28$elm_mdl$Material_Button$colored = _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-button--colored');
var _MichaelCombs28$elm_mdl$Material_Button$plain = _MichaelCombs28$elm_mdl$Material_Options$nop;
var _MichaelCombs28$elm_mdl$Material_Button$disabled = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{disabled: true});
	});
var _MichaelCombs28$elm_mdl$Material_Button$ripple = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{ripple: true});
	});
var _MichaelCombs28$elm_mdl$Material_Button$onClick = function (x) {
	return _MichaelCombs28$elm_mdl$Material_Options$set(
		function (options) {
			return _elm_lang$core$Native_Utils.update(
				options,
				{
					onClick: _elm_lang$core$Maybe$Just(
						_elm_lang$html$Html_Events$onClick(x))
				});
		});
};
var _MichaelCombs28$elm_mdl$Material_Button$defaultConfig = {ripple: false, onClick: _elm_lang$core$Maybe$Nothing, disabled: false, type_: _elm_lang$core$Maybe$Nothing};
var _MichaelCombs28$elm_mdl$Material_Button$view = F4(
	function (lift, model, config, html) {
		var summary = A2(_MichaelCombs28$elm_mdl$Material_Options$collect, _MichaelCombs28$elm_mdl$Material_Button$defaultConfig, config);
		var startListeners = summary.config.ripple ? {
			ctor: '::',
			_0: _elm_lang$core$Maybe$Just(
				A2(_MichaelCombs28$elm_mdl$Material_Ripple$downOn_, lift, 'mousedown')),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Maybe$Just(
					A2(_MichaelCombs28$elm_mdl$Material_Ripple$downOn_, lift, 'touchstart')),
				_1: {ctor: '[]'}
			}
		} : {ctor: '[]'};
		var stopListeners = function () {
			var handle = function (_p0) {
				return _elm_lang$core$Maybe$Just(
					(summary.config.ripple ? _MichaelCombs28$elm_mdl$Material_Button$blurAndForward : _MichaelCombs28$elm_mdl$Material_Helpers$blurOn)(_p0));
			};
			return {
				ctor: '::',
				_0: handle('mouseup'),
				_1: {
					ctor: '::',
					_0: handle('mouseleave'),
					_1: {
						ctor: '::',
						_0: handle('touchend'),
						_1: {ctor: '[]'}
					}
				}
			};
		}();
		var misc = {
			ctor: '::',
			_0: summary.config.onClick,
			_1: {
				ctor: '::',
				_0: summary.config.disabled ? _elm_lang$core$Maybe$Just(
					_elm_lang$html$Html_Attributes$disabled(true)) : _elm_lang$core$Maybe$Nothing,
				_1: {ctor: '[]'}
			}
		};
		var type_ = function () {
			var _p1 = summary.config.type_;
			if (_p1.ctor === 'Nothing') {
				return {ctor: '[]'};
			} else {
				return {
					ctor: '::',
					_0: _elm_lang$core$Maybe$Just(
						_elm_lang$html$Html_Attributes$type_(_p1._0)),
					_1: {ctor: '[]'}
				};
			}
		}();
		return A5(
			_MichaelCombs28$elm_mdl$Material_Options$apply,
			summary,
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-button'),
				_1: {
					ctor: '::',
					_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-js-button'),
					_1: {
						ctor: '::',
						_0: A2(
							_MichaelCombs28$elm_mdl$Material_Options$when,
							_MichaelCombs28$elm_mdl$Material_Options$cs('mdl-js-ripple-effect'),
							summary.config.ripple),
						_1: {ctor: '[]'}
					}
				}
			},
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				_elm_lang$core$List$concat(
					{
						ctor: '::',
						_0: startListeners,
						_1: {
							ctor: '::',
							_0: stopListeners,
							_1: {
								ctor: '::',
								_0: misc,
								_1: {
									ctor: '::',
									_0: type_,
									_1: {ctor: '[]'}
								}
							}
						}
					})),
			summary.config.ripple ? _elm_lang$core$List$concat(
				{
					ctor: '::',
					_0: html,
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$map,
								lift,
								A2(
									_MichaelCombs28$elm_mdl$Material_Ripple$view_,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('mdl-button__ripple-container'),
										_1: {
											ctor: '::',
											_0: _MichaelCombs28$elm_mdl$Material_Ripple$upOn('blur'),
											_1: {
												ctor: '::',
												_0: _MichaelCombs28$elm_mdl$Material_Ripple$upOn('touchcancel'),
												_1: {ctor: '[]'}
											}
										}
									},
									model)),
							_1: {ctor: '[]'}
						},
						_1: {ctor: '[]'}
					}
				}) : html);
	});
var _MichaelCombs28$elm_mdl$Material_Button$update = function (action) {
	return _MichaelCombs28$elm_mdl$Material_Ripple$update(action);
};
var _MichaelCombs28$elm_mdl$Material_Button$render = A5(
	_MichaelCombs28$elm_parts$Parts$create,
	_MichaelCombs28$elm_mdl$Material_Button$view,
	_MichaelCombs28$elm_parts$Parts$generalize(_MichaelCombs28$elm_mdl$Material_Button$update),
	function (_) {
		return _.button;
	},
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.update(
				y,
				{button: x});
		}),
	_MichaelCombs28$elm_mdl$Material_Ripple$model);
var _MichaelCombs28$elm_mdl$Material_Button$defaultModel = _MichaelCombs28$elm_mdl$Material_Ripple$model;
var _MichaelCombs28$elm_mdl$Material_Button$Config = F4(
	function (a, b, c, d) {
		return {ripple: a, onClick: b, disabled: c, type_: d};
	});
