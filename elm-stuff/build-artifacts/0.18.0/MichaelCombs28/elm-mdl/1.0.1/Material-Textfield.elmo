var _MichaelCombs28$elm_mdl$Material_Textfield$update = F2(
	function (action, model) {
		var _p0 = action;
		switch (_p0.ctor) {
			case 'Input':
				return _elm_lang$core$Native_Utils.update(
					model,
					{value: _p0._0});
			case 'Blur':
				return _elm_lang$core$Native_Utils.update(
					model,
					{isFocused: false});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{isFocused: true});
		}
	});
var _MichaelCombs28$elm_mdl$Material_Textfield$defaultModel = {isFocused: false, value: ''};
var _MichaelCombs28$elm_mdl$Material_Textfield$cols = function (cols) {
	return _MichaelCombs28$elm_mdl$Material_Options$set(
		function (config) {
			return _elm_lang$core$Native_Utils.update(
				config,
				{
					cols: _elm_lang$core$Maybe$Just(cols)
				});
		});
};
var _MichaelCombs28$elm_mdl$Material_Textfield$rows = function (rows) {
	return _MichaelCombs28$elm_mdl$Material_Options$set(
		function (config) {
			return _elm_lang$core$Native_Utils.update(
				config,
				{
					rows: _elm_lang$core$Maybe$Just(rows)
				});
		});
};
var _MichaelCombs28$elm_mdl$Material_Textfield$style = _MichaelCombs28$elm_mdl$Material_Options$inner;
var _MichaelCombs28$elm_mdl$Material_Textfield$on = F2(
	function (event, decoder) {
		return _MichaelCombs28$elm_mdl$Material_Options$set(
			function (config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{
						listeners: A2(
							_elm_lang$core$Basics_ops['++'],
							config.listeners,
							{
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Events$on, event, decoder),
								_1: {ctor: '[]'}
							})
					});
			});
	});
var _MichaelCombs28$elm_mdl$Material_Textfield$onInput = function (f) {
	return A2(
		_MichaelCombs28$elm_mdl$Material_Textfield$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, f, _elm_lang$html$Html_Events$targetValue));
};
var _MichaelCombs28$elm_mdl$Material_Textfield$onBlur = function (f) {
	return A2(
		_MichaelCombs28$elm_mdl$Material_Textfield$on,
		'focusout',
		_elm_lang$core$Json_Decode$succeed(f));
};
var _MichaelCombs28$elm_mdl$Material_Textfield$onFocus = function (f) {
	return A2(
		_MichaelCombs28$elm_mdl$Material_Textfield$on,
		'focusin',
		_elm_lang$core$Json_Decode$succeed(f));
};
var _MichaelCombs28$elm_mdl$Material_Textfield$disabled = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{disabled: true});
	});
var _MichaelCombs28$elm_mdl$Material_Textfield$maxlength = function (v) {
	return _MichaelCombs28$elm_mdl$Material_Options$set(
		function (config) {
			return _elm_lang$core$Native_Utils.update(
				config,
				{
					maxlength: _elm_lang$core$Maybe$Just(v)
				});
		});
};
var _MichaelCombs28$elm_mdl$Material_Textfield$autofocus = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{autofocus: true});
	});
var _MichaelCombs28$elm_mdl$Material_Textfield$value = function (str) {
	return _MichaelCombs28$elm_mdl$Material_Options$set(
		function (config) {
			return _elm_lang$core$Native_Utils.update(
				config,
				{
					value: _elm_lang$core$Maybe$Just(str)
				});
		});
};
var _MichaelCombs28$elm_mdl$Material_Textfield$error = function (str) {
	return _MichaelCombs28$elm_mdl$Material_Options$set(
		function (config) {
			return _elm_lang$core$Native_Utils.update(
				config,
				{
					error: _elm_lang$core$Maybe$Just(str)
				});
		});
};
var _MichaelCombs28$elm_mdl$Material_Textfield$expandableIcon = function (id) {
	return _MichaelCombs28$elm_mdl$Material_Options$set(
		function (config) {
			return _elm_lang$core$Native_Utils.update(
				config,
				{expandableIcon: id});
		});
};
var _MichaelCombs28$elm_mdl$Material_Textfield$expandable = function (id) {
	return _MichaelCombs28$elm_mdl$Material_Options$set(
		function (config) {
			return _elm_lang$core$Native_Utils.update(
				config,
				{
					expandable: _elm_lang$core$Maybe$Just(id)
				});
		});
};
var _MichaelCombs28$elm_mdl$Material_Textfield$floatingLabel = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{labelFloat: true});
	});
var _MichaelCombs28$elm_mdl$Material_Textfield$label = function (str) {
	return _MichaelCombs28$elm_mdl$Material_Options$set(
		function (config) {
			return _elm_lang$core$Native_Utils.update(
				config,
				{
					labelText: _elm_lang$core$Maybe$Just(str)
				});
		});
};
var _MichaelCombs28$elm_mdl$Material_Textfield$Config = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return {labelText: a, labelFloat: b, error: c, value: d, disabled: e, kind: f, rows: g, cols: h, autofocus: i, maxlength: j, inner: k, listeners: l, expandable: m, expandableIcon: n};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _MichaelCombs28$elm_mdl$Material_Textfield$Model = F2(
	function (a, b) {
		return {isFocused: a, value: b};
	});
var _MichaelCombs28$elm_mdl$Material_Textfield$Password = {ctor: 'Password'};
var _MichaelCombs28$elm_mdl$Material_Textfield$password = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{kind: _MichaelCombs28$elm_mdl$Material_Textfield$Password});
	});
var _MichaelCombs28$elm_mdl$Material_Textfield$Textarea = {ctor: 'Textarea'};
var _MichaelCombs28$elm_mdl$Material_Textfield$textarea = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{kind: _MichaelCombs28$elm_mdl$Material_Textfield$Textarea});
	});
var _MichaelCombs28$elm_mdl$Material_Textfield$Text = {ctor: 'Text'};
var _MichaelCombs28$elm_mdl$Material_Textfield$defaultConfig = {
	labelText: _elm_lang$core$Maybe$Nothing,
	labelFloat: false,
	error: _elm_lang$core$Maybe$Nothing,
	value: _elm_lang$core$Maybe$Nothing,
	disabled: false,
	kind: _MichaelCombs28$elm_mdl$Material_Textfield$Text,
	rows: _elm_lang$core$Maybe$Nothing,
	cols: _elm_lang$core$Maybe$Nothing,
	autofocus: false,
	maxlength: _elm_lang$core$Maybe$Nothing,
	inner: {ctor: '[]'},
	listeners: {ctor: '[]'},
	expandable: _elm_lang$core$Maybe$Nothing,
	expandableIcon: 'search'
};
var _MichaelCombs28$elm_mdl$Material_Textfield$text_ = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{kind: _MichaelCombs28$elm_mdl$Material_Textfield$Text});
	});
var _MichaelCombs28$elm_mdl$Material_Textfield$Input = function (a) {
	return {ctor: 'Input', _0: a};
};
var _MichaelCombs28$elm_mdl$Material_Textfield$Focus = {ctor: 'Focus'};
var _MichaelCombs28$elm_mdl$Material_Textfield$Blur = {ctor: 'Blur'};
var _MichaelCombs28$elm_mdl$Material_Textfield$view = F3(
	function (lift, model, options) {
		var _p1 = A2(_MichaelCombs28$elm_mdl$Material_Options$collect, _MichaelCombs28$elm_mdl$Material_Textfield$defaultConfig, options);
		var summary = _p1;
		var config = _p1.config;
		var val = A2(_elm_lang$core$Maybe$withDefault, model.value, config.value);
		var isTextarea = _elm_lang$core$Native_Utils.eq(config.kind, _MichaelCombs28$elm_mdl$Material_Textfield$Textarea);
		var elementFunction = isTextarea ? _elm_lang$html$Html$textarea : _elm_lang$html$Html$input;
		var typeAttributes = function () {
			var _p2 = config.kind;
			switch (_p2.ctor) {
				case 'Text':
					return {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('text'),
						_1: {ctor: '[]'}
					};
				case 'Password':
					return {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('password'),
						_1: {ctor: '[]'}
					};
				default:
					return A2(
						_elm_lang$core$Basics_ops['++'],
						{ctor: '[]'},
						A2(
							_elm_lang$core$Basics_ops['++'],
							function () {
								var _p3 = config.rows;
								if (_p3.ctor === 'Just') {
									return {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$rows(_p3._0),
										_1: {ctor: '[]'}
									};
								} else {
									return {ctor: '[]'};
								}
							}(),
							function () {
								var _p4 = config.cols;
								if (_p4.ctor === 'Just') {
									return {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$cols(_p4._0),
										_1: {ctor: '[]'}
									};
								} else {
									return {ctor: '[]'};
								}
							}()));
			}
		}();
		var maxlength = function () {
			var _p5 = config.maxlength;
			if (_p5.ctor === 'Just') {
				return {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$maxlength(_p5._0),
					_1: {ctor: '[]'}
				};
			} else {
				return {ctor: '[]'};
			}
		}();
		var listeners = config.listeners;
		var textValue = function () {
			var _p6 = config.value;
			if (_p6.ctor === 'Just') {
				return {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value(_p6._0),
					_1: {ctor: '[]'}
				};
			} else {
				return {ctor: '[]'};
			}
		}();
		var defaultInput = function () {
			var _p7 = config.value;
			if (_p7.ctor === 'Just') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(
						_elm_lang$html$Html_Events$on,
						'input',
						A2(
							_elm_lang$core$Json_Decode$map,
							function (_p8) {
								return lift(
									_MichaelCombs28$elm_mdl$Material_Textfield$Input(_p8));
							},
							_elm_lang$html$Html_Events$targetValue)));
			}
		}();
		var labelFor = function () {
			var _p9 = config.expandable;
			if (_p9.ctor === 'Nothing') {
				return {ctor: '[]'};
			} else {
				return {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for(_p9._0),
					_1: {ctor: '[]'}
				};
			}
		}();
		var expandableId = function () {
			var _p10 = config.expandable;
			if (_p10.ctor === 'Nothing') {
				return _MichaelCombs28$elm_mdl$Material_Options$nop;
			} else {
				return _MichaelCombs28$elm_mdl$Material_Options_Internal$attribute(
					_elm_lang$html$Html_Attributes$id(_p10._0));
			}
		}();
		var expHolder = function () {
			var _p11 = config.expandable;
			if (_p11.ctor === 'Nothing') {
				return _elm_lang$core$Basics$identity;
			} else {
				return function (x) {
					return {
						ctor: '::',
						_0: A4(
							_MichaelCombs28$elm_mdl$Material_Options$styled_,
							_elm_lang$html$Html$label,
							{
								ctor: '::',
								_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-button'),
								_1: {
									ctor: '::',
									_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-js-button'),
									_1: {
										ctor: '::',
										_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-button--icon'),
										_1: {ctor: '[]'}
									}
								}
							},
							labelFor,
							{
								ctor: '::',
								_0: _MichaelCombs28$elm_mdl$Material_Icon$i(config.expandableIcon),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A3(
								_MichaelCombs28$elm_mdl$Material_Options$styled,
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-textfield__expandable-holder'),
									_1: {ctor: '[]'}
								},
								x),
							_1: {ctor: '[]'}
						}
					};
				};
			}
		}();
		return A5(
			_MichaelCombs28$elm_mdl$Material_Options$apply,
			summary,
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-textfield'),
				_1: {
					ctor: '::',
					_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-js-textfield'),
					_1: {
						ctor: '::',
						_0: _MichaelCombs28$elm_mdl$Material_Options$cs('is-upgraded'),
						_1: {
							ctor: '::',
							_0: config.labelFloat ? _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-textfield--floating-label') : _MichaelCombs28$elm_mdl$Material_Options$nop,
							_1: {
								ctor: '::',
								_0: (!_elm_lang$core$Native_Utils.eq(config.error, _elm_lang$core$Maybe$Nothing)) ? _MichaelCombs28$elm_mdl$Material_Options$cs('is-invalid') : _MichaelCombs28$elm_mdl$Material_Options$nop,
								_1: {
									ctor: '::',
									_0: (!_elm_lang$core$Native_Utils.eq(val, '')) ? _MichaelCombs28$elm_mdl$Material_Options$cs('is-dirty') : _MichaelCombs28$elm_mdl$Material_Options$nop,
									_1: {
										ctor: '::',
										_0: (model.isFocused && (!config.disabled)) ? _MichaelCombs28$elm_mdl$Material_Options$cs('is-focused') : _MichaelCombs28$elm_mdl$Material_Options$nop,
										_1: {
											ctor: '::',
											_0: config.disabled ? _MichaelCombs28$elm_mdl$Material_Options$cs('is-disabled') : _MichaelCombs28$elm_mdl$Material_Options$nop,
											_1: {
												ctor: '::',
												_0: A2(
													_MichaelCombs28$elm_mdl$Material_Options$when,
													_MichaelCombs28$elm_mdl$Material_Options$cs('mdl-textfield--expandable'),
													!_elm_lang$core$Native_Utils.eq(config.expandable, _elm_lang$core$Maybe$Nothing)),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				{
					ctor: '::',
					_0: defaultInput,
					_1: {ctor: '[]'}
				}),
			expHolder(
				{
					ctor: '::',
					_0: A4(
						_MichaelCombs28$elm_mdl$Material_Options$styled_,
						elementFunction,
						{
							ctor: '::',
							_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-textfield__input'),
							_1: {
								ctor: '::',
								_0: A2(_MichaelCombs28$elm_mdl$Material_Options$css, 'outline', 'none'),
								_1: {
									ctor: '::',
									_0: _MichaelCombs28$elm_mdl$Material_Options_Internal$attribute(
										A2(
											_elm_lang$html$Html_Events$on,
											'focus',
											_elm_lang$core$Json_Decode$succeed(
												lift(_MichaelCombs28$elm_mdl$Material_Textfield$Focus)))),
									_1: {
										ctor: '::',
										_0: _MichaelCombs28$elm_mdl$Material_Options_Internal$attribute(
											A2(
												_elm_lang$html$Html_Events$on,
												'blur',
												_elm_lang$core$Json_Decode$succeed(
													lift(_MichaelCombs28$elm_mdl$Material_Textfield$Blur)))),
										_1: {
											ctor: '::',
											_0: expandableId,
											_1: {
												ctor: '::',
												_0: _MichaelCombs28$elm_mdl$Material_Options$many(config.inner),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$disabled(config.disabled),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$autofocus(config.autofocus),
									_1: {ctor: '[]'}
								}
							},
							A2(
								_elm_lang$core$Basics_ops['++'],
								textValue,
								A2(
									_elm_lang$core$Basics_ops['++'],
									typeAttributes,
									A2(_elm_lang$core$Basics_ops['++'], maxlength, listeners)))),
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$label,
							A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('mdl-textfield__label'),
									_1: {ctor: '[]'}
								},
								labelFor),
							function () {
								var _p12 = config.labelText;
								if (_p12.ctor === 'Just') {
									return {
										ctor: '::',
										_0: _elm_lang$html$Html$text(_p12._0),
										_1: {ctor: '[]'}
									};
								} else {
									return {ctor: '[]'};
								}
							}()),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Maybe$withDefault,
								A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{ctor: '[]'}),
								A2(
									_elm_lang$core$Maybe$map,
									function (e) {
										return A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('mdl-textfield__error'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(e),
												_1: {ctor: '[]'}
											});
									},
									config.error)),
							_1: {ctor: '[]'}
						}
					}
				}));
	});
var _MichaelCombs28$elm_mdl$Material_Textfield$render = A5(
	_MichaelCombs28$elm_parts$Parts$create,
	_MichaelCombs28$elm_mdl$Material_Textfield$view,
	F3(
		function (_p13, msg, model) {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Maybe$Just(
					A2(_MichaelCombs28$elm_mdl$Material_Textfield$update, msg, model)),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}),
	function (_) {
		return _.textfield;
	},
	F2(
		function (x, c) {
			return _elm_lang$core$Native_Utils.update(
				c,
				{textfield: x});
		}),
	_MichaelCombs28$elm_mdl$Material_Textfield$defaultModel);
