var _MichaelCombs28$elm_mdl$Material_Tooltip$set = F2(
	function (x, y) {
		return _elm_lang$core$Native_Utils.update(
			y,
			{tooltip: x});
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$container = function (elem) {
	return _MichaelCombs28$elm_mdl$Material_Options$set(
		function (options) {
			return _elm_lang$core$Native_Utils.update(
				options,
				{container: elem});
		});
};
var _MichaelCombs28$elm_mdl$Material_Tooltip$isTooltipClass = function (path) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function ($class) {
			return A2(_elm_lang$core$String$contains, 'mdl-tooltip', $class) ? _elm_lang$core$Json_Decode$succeed(true) : _elm_lang$core$Json_Decode$succeed(false);
		},
		A2(_elm_lang$core$Json_Decode$at, path, _MichaelCombs28$elm_dom$DOM$className));
};
var _MichaelCombs28$elm_mdl$Material_Tooltip$sibling = function (d) {
	var valid = function (path) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (res) {
				return res ? A2(_elm_lang$core$Json_Decode$at, path, d) : _elm_lang$core$Json_Decode$fail('');
			},
			_MichaelCombs28$elm_mdl$Material_Tooltip$isTooltipClass(path));
	};
	var createPath = function (depth) {
		var parents = A2(_elm_lang$core$List$repeat, depth, 'parentElement');
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: 'target',
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				parents,
				{
					ctor: '::',
					_0: 'nextSibling',
					_1: {ctor: '[]'}
				}));
	};
	var paths = A2(
		_elm_lang$core$List$map,
		createPath,
		A2(_elm_lang$core$List$range, 0, 4));
	return _elm_lang$core$Json_Decode$oneOf(
		A2(_elm_lang$core$List$map, valid, paths));
};
var _MichaelCombs28$elm_mdl$Material_Tooltip$update = F2(
	function (action, model) {
		var _p0 = action;
		if (_p0.ctor === 'Enter') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{isActive: true, domState: _p0._0}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{isActive: false}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$calculatePos = F2(
	function (pos, domState) {
		var getValuesFor = F2(
			function (l, r) {
				return (_elm_lang$core$Native_Utils.cmp(l + r, 0) < 0) ? {ctor: '_Tuple2', _0: 0, _1: 0} : {ctor: '_Tuple2', _0: l, _1: r};
			});
		var offsetHeight = domState.offsetHeight;
		var marginTop = -1 * (offsetHeight / 2);
		var offsetWidth = domState.offsetWidth;
		var marginLeft = -1 * (offsetWidth / 2);
		var props = domState.rect;
		var left = props.left + (props.width / 2);
		var _p1 = A2(getValuesFor, left, marginLeft);
		var newLeft = _p1._0;
		var newMarginLeft = _p1._1;
		var top = props.top + (props.height / 2);
		var _p2 = A2(getValuesFor, top, marginTop);
		var newTop = _p2._0;
		var newMarginTop = _p2._1;
		var out = function () {
			var _p3 = pos;
			switch (_p3.ctor) {
				case 'Left':
					return {left: (props.left - offsetWidth) - 10, top: newTop, marginTop: newMarginTop, marginLeft: 0};
				case 'Right':
					return {left: (props.left + props.width) + 10, top: newTop, marginTop: newMarginTop, marginLeft: 0};
				case 'Top':
					return {left: newLeft, top: (props.top - offsetHeight) - 10, marginTop: 0, marginLeft: newMarginLeft};
				default:
					return {left: newLeft, top: (props.top + props.height) + 10, marginTop: 0, marginLeft: newMarginLeft};
			}
		}();
		return out;
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$defaultDOMState = {
	rect: {left: 0, top: 0, width: 0, height: 0},
	offsetWidth: 0,
	offsetHeight: 0
};
var _MichaelCombs28$elm_mdl$Material_Tooltip$defaultPos = {left: 0, top: 0, marginLeft: 0, marginTop: 0};
var _MichaelCombs28$elm_mdl$Material_Tooltip$defaultModel = {isActive: false, domState: _MichaelCombs28$elm_mdl$Material_Tooltip$defaultDOMState};
var _MichaelCombs28$elm_mdl$Material_Tooltip$pack = A4(
	_MichaelCombs28$elm_parts$Parts$pack,
	_MichaelCombs28$elm_parts$Parts$generalize(_MichaelCombs28$elm_mdl$Material_Tooltip$update),
	function (_) {
		return _.tooltip;
	},
	_MichaelCombs28$elm_mdl$Material_Tooltip$set,
	_MichaelCombs28$elm_mdl$Material_Tooltip$defaultModel);
var _MichaelCombs28$elm_mdl$Material_Tooltip$Model = F2(
	function (a, b) {
		return {isActive: a, domState: b};
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$Pos = F4(
	function (a, b, c, d) {
		return {left: a, top: b, marginLeft: c, marginTop: d};
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$DOMState = F3(
	function (a, b, c) {
		return {rect: a, offsetWidth: b, offsetHeight: c};
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$stateDecoder = A4(
	_elm_lang$core$Json_Decode$map3,
	_MichaelCombs28$elm_mdl$Material_Tooltip$DOMState,
	_MichaelCombs28$elm_dom$DOM$target(_MichaelCombs28$elm_dom$DOM$boundingClientRect),
	_MichaelCombs28$elm_mdl$Material_Tooltip$sibling(_MichaelCombs28$elm_dom$DOM$offsetWidth),
	_MichaelCombs28$elm_mdl$Material_Tooltip$sibling(_MichaelCombs28$elm_dom$DOM$offsetHeight));
var _MichaelCombs28$elm_mdl$Material_Tooltip$Config = F3(
	function (a, b, c) {
		return {size: a, position: b, container: c};
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$Leave = {ctor: 'Leave'};
var _MichaelCombs28$elm_mdl$Material_Tooltip$onMouseLeave = F2(
	function (lift, idx) {
		return A2(
			_elm_lang$html$Html_Events$on,
			'mouseleave',
			_elm_lang$core$Json_Decode$succeed(
				A3(_MichaelCombs28$elm_mdl$Material_Tooltip$pack, lift, idx, _MichaelCombs28$elm_mdl$Material_Tooltip$Leave)));
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$onLeave = function (lift) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(
			lift(_MichaelCombs28$elm_mdl$Material_Tooltip$Leave)));
};
var _MichaelCombs28$elm_mdl$Material_Tooltip$Enter = function (a) {
	return {ctor: 'Enter', _0: a};
};
var _MichaelCombs28$elm_mdl$Material_Tooltip$onMouseEnter = F2(
	function (lift, idx) {
		return A2(
			_elm_lang$html$Html_Events$on,
			'mouseenter',
			A2(
				_elm_lang$core$Json_Decode$map,
				function (_p4) {
					return A3(
						_MichaelCombs28$elm_mdl$Material_Tooltip$pack,
						lift,
						idx,
						_MichaelCombs28$elm_mdl$Material_Tooltip$Enter(_p4));
				},
				_MichaelCombs28$elm_mdl$Material_Tooltip$stateDecoder));
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$attach = F2(
	function (lift, index) {
		return _MichaelCombs28$elm_mdl$Material_Options$many(
			{
				ctor: '::',
				_0: _MichaelCombs28$elm_mdl$Material_Options_Internal$attribute(
					A2(_MichaelCombs28$elm_mdl$Material_Tooltip$onMouseEnter, lift, index)),
				_1: {
					ctor: '::',
					_0: _MichaelCombs28$elm_mdl$Material_Options_Internal$attribute(
						A2(_MichaelCombs28$elm_mdl$Material_Tooltip$onMouseLeave, lift, index)),
					_1: {ctor: '[]'}
				}
			});
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$onEnter = function (lift) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		A2(
			_elm_lang$core$Json_Decode$map,
			function (_p5) {
				return lift(
					_MichaelCombs28$elm_mdl$Material_Tooltip$Enter(_p5));
			},
			_MichaelCombs28$elm_mdl$Material_Tooltip$stateDecoder));
};
var _MichaelCombs28$elm_mdl$Material_Tooltip$Large = {ctor: 'Large'};
var _MichaelCombs28$elm_mdl$Material_Tooltip$large = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{size: _MichaelCombs28$elm_mdl$Material_Tooltip$Large});
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$Default = {ctor: 'Default'};
var _MichaelCombs28$elm_mdl$Material_Tooltip$Bottom = {ctor: 'Bottom'};
var _MichaelCombs28$elm_mdl$Material_Tooltip$defaultConfig = {size: _MichaelCombs28$elm_mdl$Material_Tooltip$Default, position: _MichaelCombs28$elm_mdl$Material_Tooltip$Bottom, container: _elm_lang$html$Html$div};
var _MichaelCombs28$elm_mdl$Material_Tooltip$view = F4(
	function (lift, model, options, content) {
		var px = function (f) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(f),
				'px');
		};
		var summary = A2(_MichaelCombs28$elm_mdl$Material_Options$collect, _MichaelCombs28$elm_mdl$Material_Tooltip$defaultConfig, options);
		var config = summary.config;
		var pos = model.isActive ? A2(_MichaelCombs28$elm_mdl$Material_Tooltip$calculatePos, config.position, model.domState) : _MichaelCombs28$elm_mdl$Material_Tooltip$defaultPos;
		return A3(
			_MichaelCombs28$elm_mdl$Material_Options$styled,
			config.container,
			{
				ctor: '::',
				_0: _MichaelCombs28$elm_mdl$Material_Options$cs('mdl-tooltip'),
				_1: {
					ctor: '::',
					_0: A2(
						_MichaelCombs28$elm_mdl$Material_Options$when,
						_MichaelCombs28$elm_mdl$Material_Options$cs('is-active'),
						model.isActive),
					_1: {
						ctor: '::',
						_0: A2(
							_MichaelCombs28$elm_mdl$Material_Options$when,
							_MichaelCombs28$elm_mdl$Material_Options$cs('mdl-tooltip--large'),
							_elm_lang$core$Native_Utils.eq(config.size, _MichaelCombs28$elm_mdl$Material_Tooltip$Large)),
						_1: {
							ctor: '::',
							_0: A2(
								_MichaelCombs28$elm_mdl$Material_Options$when,
								A2(
									_MichaelCombs28$elm_mdl$Material_Options$css,
									'left',
									px(pos.left)),
								model.isActive),
							_1: {
								ctor: '::',
								_0: A2(
									_MichaelCombs28$elm_mdl$Material_Options$when,
									A2(
										_MichaelCombs28$elm_mdl$Material_Options$css,
										'margin-left',
										px(pos.marginLeft)),
									model.isActive),
								_1: {
									ctor: '::',
									_0: A2(
										_MichaelCombs28$elm_mdl$Material_Options$when,
										A2(
											_MichaelCombs28$elm_mdl$Material_Options$css,
											'top',
											px(pos.top)),
										model.isActive),
									_1: {
										ctor: '::',
										_0: A2(
											_MichaelCombs28$elm_mdl$Material_Options$when,
											A2(
												_MichaelCombs28$elm_mdl$Material_Options$css,
												'margin-top',
												px(pos.marginTop)),
											model.isActive),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			},
			content);
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$render = A5(
	_MichaelCombs28$elm_parts$Parts$create,
	_MichaelCombs28$elm_mdl$Material_Tooltip$view,
	_MichaelCombs28$elm_parts$Parts$generalize(_MichaelCombs28$elm_mdl$Material_Tooltip$update),
	function (_) {
		return _.tooltip;
	},
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.update(
				y,
				{tooltip: x});
		}),
	_MichaelCombs28$elm_mdl$Material_Tooltip$defaultModel);
var _MichaelCombs28$elm_mdl$Material_Tooltip$bottom = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{position: _MichaelCombs28$elm_mdl$Material_Tooltip$Bottom});
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$Top = {ctor: 'Top'};
var _MichaelCombs28$elm_mdl$Material_Tooltip$top = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{position: _MichaelCombs28$elm_mdl$Material_Tooltip$Top});
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$Right = {ctor: 'Right'};
var _MichaelCombs28$elm_mdl$Material_Tooltip$right = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{position: _MichaelCombs28$elm_mdl$Material_Tooltip$Right});
	});
var _MichaelCombs28$elm_mdl$Material_Tooltip$Left = {ctor: 'Left'};
var _MichaelCombs28$elm_mdl$Material_Tooltip$left = _MichaelCombs28$elm_mdl$Material_Options$set(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{position: _MichaelCombs28$elm_mdl$Material_Tooltip$Left});
	});
